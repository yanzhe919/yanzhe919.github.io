以下简要介绍SSL协议的工作方式。客户端要收发几个握手信号：

 * 发送一个“ClientHello”消息，内容包括：支持的协议版本，比如TLS1.0版，一个客户端生成的随机数（稍后用于生成“会话密钥”），支持的加密算法（如RSA公钥加密）和支持的压缩算法。
 * 然后收到一个“ServerHello”消息，内容包括：确认使用的加密通信协议版本，比如TLS 1.0版本（如果浏览器与服务器支持的版本不一致，服务器关闭加密通信），一个服务器生成的随机数（稍后用于生成“对话密钥”），确认使用的加密方法（如RSA公钥加密），服务器证书。
 * 当双方知道了连接参数，客户端与服务器交换证书（依靠被选择的公钥系统）。这些证书通常基于X.509，不过已有草案支持以OpenPGP为基础的证书。
 * 服务器请求客户端公钥。客户端有证书即双向身份认证，没证书时随机生成公钥。
 * 客户端与服务器通过公钥保密协商共同的主私钥（双方随机协商），这通过精心谨慎设计的伪随机数功能实现。结果可能使用Diffie-Hellman交换，或简化的公钥加密，双方各自用私钥解密。所有其他关键数据的加密均使用这个“主密钥”。数据传输中记录层（Record layer）用于封装更高层的HTTP等协议。记录层数据可以被随意压缩、加密，与消息验证码压缩在一起。每个记录层包都有一个Content-Type段用以记录更上层用的协议。


TLS[编辑]
TLS利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公钥基础设施。不过在实现的典型例子中，只有网络服务者被可靠身份验证，而其客户端则不一定。这是因为公钥基础设施普遍商业运营，电子签名证书通常需要付费购买。协议的设计在某种程度上能够使主从架构应用程序通讯本身预防窃听、干扰和消息伪造。

TLS包含三个基本阶段：

 * 对等协商支持的密钥算法
 * 基于非对称密钥的信息传输加密和身份认证、基于PKI证书的身份认证
 * 基于对称密钥的数据传输保密
 
在第一阶段，客户端与服务器协商所用密码算法。当前广泛实现的算法选择如下：

* 公钥私钥非对称密钥保密系统：RSA、Diffie-Hellman、DSA;
* 对称密钥保密系统：RC2、RC4、IDEA、DES、Triple DES、AES以及Camellia；
* 单向散列函数：MD5、SHA1以及SHA256。

TLS/SSL有多样的安全保护措施：

* 所有的记录层数据均被编号，用于消息验证码校验。

